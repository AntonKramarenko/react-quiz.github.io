{"ast":null,"code":"var _jsxFileName = \"/Users/anton/Desktop/Web/react-quiz/src/Containers/QuizCreator/QuizCreator.js\";\nimport React, { Component } from \"react\";\nimport classes from './QuizCreator.module.css';\nimport Button from \"../../Components/UI/Button/Button\";\nimport { createControl, validate, validateForm } from '../../form/formFramework';\nimport Input from \"../../Components/UI/Input/Input\";\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary';\nimport Select from '../../Components/UI/Select/Select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createOptionControl(number) {\n  return createControl({\n    label: `Вариант ${number}`,\n    errorMessage: 'Значение не может быть пустым',\n    id: number\n  }, {\n    required: true\n  });\n}\n\nfunction createFormControls() {\n  return {\n    question: createControl({\n      label: 'Введите вопрос',\n      errorMassage: 'Вопрос не может быть пустым'\n    }, {\n      required: true\n    }),\n    option1: createOptionControl(1),\n    option2: createOptionControl(2),\n    option3: createOptionControl(3),\n    option4: createOptionControl(4)\n  };\n}\n\nexport default class QuizCreator extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      quiz: [],\n      isFormValid: false,\n      rightAnswerId: 1,\n      formControls: createFormControls()\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n    };\n\n    this.addQuestionHandler = event => {\n      event.preventDefault();\n      const quiz = this.state.quiz.concat();\n      const index = quiz.length + 1;\n      const {\n        question,\n        option1,\n        option2,\n        option3,\n        option4\n      } = this.state.formControls;\n      const questionItem = {\n        question: question.value,\n        id: index,\n        rightAnswerId: this.state.rightAnswerId,\n        answers: [{\n          text: option1.value,\n          id: option1.id\n        }, {\n          text: option2.value,\n          id: option2.id\n        }, {\n          text: option3.value,\n          id: option3.id\n        }, {\n          text: option4.value,\n          id: option4.id\n        }]\n      };\n    };\n\n    this.createQuizHandler = event => {};\n\n    this.changeHandler = (value, controlName) => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.touched = true;\n      control.value = value;\n      control.valid = validate(control.value, control.validation);\n      formControls[controlName] = control;\n      this.setState({\n        formControls,\n        isFormValid: validateForm(formControls)\n      });\n    };\n\n    this.selectChangeHandler = event => {\n      this.setState({\n        rightAnswerId: +event.target.value\n      });\n    };\n  }\n\n  renderControls() {\n    return Object.keys(this.state.formControls).map((controlName, index) => {\n      const control = this.state.formControls[controlName];\n      return /*#__PURE__*/_jsxDEV(Auxiliary, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          label: control.label,\n          value: control.value,\n          valid: control.valid,\n          shouldValidate: !!control.validation,\n          touched: control.touched,\n          errorMessage: control.errorMessage,\n          onChange: event => this.changeHandler(event.target.value, controlName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), index === 0 ? /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 36\n        }, this) : null]\n      }, controlName + index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  render() {\n    const select = /*#__PURE__*/_jsxDEV(Select, {\n      label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439 \\u043E\\u0442\\u0432\\u0435\\u0442\",\n      value: this.state.rightAnswerId,\n      onChange: this.selectChangeHandler,\n      options: [{\n        text: 1,\n        value: 1\n      }, {\n        text: 2,\n        value: 2\n      }, {\n        text: 3,\n        value: 3\n      }, {\n        text: 4,\n        value: 4\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 24\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.QuizCreator,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitHandler,\n          children: [this.renderControls(), select, /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            onClick: this.addQuestionHandler,\n            disabled: !this.state.isFormValid,\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"success\",\n            onClick: this.createQuizHandler,\n            disabled: this.state.quiz.length === 0,\n            children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/anton/Desktop/Web/react-quiz/src/Containers/QuizCreator/QuizCreator.js"],"names":["React","Component","classes","Button","createControl","validate","validateForm","Input","Auxiliary","Select","createOptionControl","number","label","errorMessage","id","required","createFormControls","question","errorMassage","option1","option2","option3","option4","QuizCreator","state","quiz","isFormValid","rightAnswerId","formControls","submitHandler","event","preventDefault","addQuestionHandler","concat","index","length","questionItem","value","answers","text","createQuizHandler","changeHandler","controlName","control","touched","valid","validation","setState","selectChangeHandler","target","renderControls","Object","keys","map","render","select"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport classes from './QuizCreator.module.css';\nimport Button from \"../../Components/UI/Button/Button\";\nimport { createControl, validate, validateForm } from '../../form/formFramework';\nimport Input from \"../../Components/UI/Input/Input\";\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary'\nimport Select from '../../Components/UI/Select/Select'\n\n\n\nfunction createOptionControl(number) {\n    return createControl({\n        label: `Вариант ${number}`,\n        errorMessage: 'Значение не может быть пустым',\n        id: number\n    }, { required: true })\n}\n\n\n\nfunction createFormControls() {\n    return {\n        question: createControl({\n            label: 'Введите вопрос',\n            errorMassage: 'Вопрос не может быть пустым'\n        }, { required: true }),\n\n        option1: createOptionControl(1),\n\n        option2: createOptionControl(2),\n\n        option3: createOptionControl(3),\n\n        option4: createOptionControl(4),\n    }\n\n}\n\n\nexport default class QuizCreator extends Component {\n\n    state = {\n        quiz: [],\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n    }\n\n    submitHandler = event => {\n        event.preventDefault()\n    }\n\n    addQuestionHandler = event => {\n        event.preventDefault()\n\n        const quiz = this.state.quiz.concat()\n        const index = quiz.length + 1\n\n        const { question, option1, option2, option3, option4 } = this.state.formControls\n\n        const questionItem = {\n            question: question.value,\n            id: index,\n            rightAnswerId: this.state.rightAnswerId,\n            answers: [\n                { text: option1.value, id: option1.id },\n                { text: option2.value, id: option2.id },\n                { text: option3.value, id: option3.id },\n                { text: option4.value, id: option4.id }\n            ]\n\n        }\n    }\n\n    createQuizHandler = event => {\n\n    }\n\n    changeHandler = (value, controlName) => {\n        const formControls = { ...this.state.formControls }\n        const control = { ...formControls[controlName] }\n\n        control.touched = true\n        control.value = value\n        control.valid = validate(control.value, control.validation)\n\n        formControls[controlName] = control\n\n        this.setState({\n            formControls,\n            isFormValid: validateForm(formControls)\n        })\n    }\n\n    renderControls() {\n        return Object.keys(this.state.formControls).map((controlName, index) => {\n            const control = this.state.formControls[controlName]\n\n            return (\n                <Auxiliary key={controlName + index}>\n                    <Input\n                        label={control.label}\n                        value={control.value}\n                        valid={control.valid}\n                        shouldValidate={!!control.validation}\n                        touched={control.touched}\n                        errorMessage={control.errorMessage}\n                        onChange={event => this.changeHandler(event.target.value, controlName)}\n                    />\n                    {index === 0 ? <hr /> : null}\n                </Auxiliary>\n            )\n        })\n    }\n\n    selectChangeHandler = event => {\n        this.setState({\n            rightAnswerId: +event.target.value\n        })\n\n    }\n\n    render() {\n        const select = <Select\n            label='Выберите правильный ответ'\n            value={this.state.rightAnswerId}\n            onChange={this.selectChangeHandler}\n            options={[\n                { text: 1, value: 1 },\n                { text: 2, value: 2 },\n                { text: 3, value: 3 },\n                { text: 4, value: 4 },\n            ]}\n        />\n\n        return (\n            <div className={classes.QuizCreator}>\n\n                <div>\n                    <h1>Создание теста</h1>\n\n                    <form onSubmit={this.submitHandler}>\n\n                        {this.renderControls()}\n\n\n                        {select}\n\n                        <Button\n                            type='primary'\n                            onClick={this.addQuestionHandler}\n                            disabled={!this.state.isFormValid}\n                        >\n                            Добавить вопрос\n                        </Button>\n\n                        <Button\n                            type='success'\n                            onClick={this.createQuizHandler}\n                            disabled={this.state.quiz.length === 0}\n                        >\n                            Создать тест\n                        </Button>\n\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}